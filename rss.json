{
  "etag": "\"d78a-5902608b98864-gzip\"",
  "href": "http://www.ruanyifeng.com/blog/atom.xml",
  "bozo": 0,
  "headers": {
    "Cache-Control": "max-age=600, public, must-revalidate",
    "ETag": "\"d78a-5902608b98864-gzip\"",
    "Connection": "close",
    "Vary": "Accept-Encoding",
    "Content-Encoding": "gzip",
    "Accept-Ranges": "bytes",
    "X-ORCA-Accelerator": "HIT from k10.mul.hnd01.jp.krill.zenlogic.net",
    "X-Edge-Location": "hnd",
    "Last-Modified": "Thu, 15 Aug 2019 11:18:33 GMT",
    "Server": "nginx/1.6.2",
    "Date": "Thu, 15 Aug 2019 14:40:00 GMT",
    "X-Cache": "HIT from k10.mul.hnd01.jp.krill.zenlogic.net",
    "Content-Length": "18959",
    "Content-Type": "application/xml"
  },
  "encoding": "utf-8",
  "updated": "Thu, 15 Aug 2019 11:18:33 GMT",
  "entries": [
    {
      "authors": [
        {
          "name": "阮一峰",
          "href": "http://www.ruanyifeng.com"
        }
      ],
      "author_detail": {
        "name": "阮一峰",
        "href": "http://www.ruanyifeng.com"
      },
      "summary": "这里记录每周值得分享的科技内容，周五发布。...",
      "updated": "2019-08-15T11:18:32Z",
      "content": [
        {
          "base": "http://www.ruanyifeng.com/blog/",
          "type": "text/html",
          "language": "en",
          "value": "<p>这里记录每周值得分享的科技内容，周五发布。</p>\n\n        <p>欢迎投稿，或推荐你自己的项目，请前往 GitHub 的 <a href=\"https://github.com/ruanyf/weekly\">ruanyf/weekly</a> 提交 issue。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201908/bg2019080702.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>封面图片：松江方塔，上海，2018。</p>\n\n<p>该塔高九层，始建于宋朝，清朝重修，沿袭了唐代砖塔风格。</p>\n\n<h2>刊首语</h2>\n\n<p>一个月之前，我在周刊讨论区发了一个帖子<a href=\"https://github.com/ruanyf/weekly/issues/692\">《谁在招人？》</a>，欢迎企业免费张贴招聘/实习信息。现在已经有30多家公司的100多个岗位，找工作的朋友可以关注。</p>\n\n<p>有的读者私下问我：\"大部分公司没写报酬，工资会不会给得低？\"我心想，你怎么会有这种担心！<strong>普通程序员的工资能有多大差别呢？</strong></p>\n\n<p>程序员是一个高度流动的行业。一家公司如果待遇偏低，肯定留不住人。普通程序员的待遇，公司与公司之间的差别不会特别大。</p>\n\n<p><strong>程序员分为两种：普通程序员需要找工作，高级程序员不需要找工作，企业争相邀请他加入。</strong></p>\n\n<p>对于大多数人来说，要操心的不是找一份工资高的工作，而是设法让自己尽快变成高级程序员，可以在这个行业里面为自己定价，而不是让别人给你定价。</p>\n\n<h2>Vue 源码解析视频</h2>\n\n<p>目前，Vue 和 React 已经成为前端工程师的基本技能。Vue 3.0 很快就会发布，但是有些 Web 前端工程师对 Vue 2.0 都没有做到熟练掌握。</p>\n\n<p>如果你想深入学习 Vue，现在有一个很好的机会。国内领先的在线教育平台\"开课吧\"联系我，愿意给周刊读者提供了一个特别优惠。</p>\n\n<p><strong>定价1988元的视频课程《Vue 源码解析》，限时免费领取</strong> ，适合所有想提升技术水平的前端学习者。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201908/bg2019080902.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>他们给了我400个名额，微信扫描下面的二维码领取。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201908/bg2019080903.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>另外，大家熟知的IT技术大牛 <strong>廖雪峰</strong> 已加盟开课吧，耗时半年研发了精品付费课程---- <strong>《Web全栈架构师》</strong> ，来帮助初级前端工程师实现全方位进阶。课程深度对标百度T6--T7，适合有1-4年开发经验的前端程序员们学习。</p>\n\n<blockquote>\n  <p><strong>《Web全栈架构师》</strong>   </p>\n\n<ul>\n<li>开课时间： 12月底  </li>\n<li>讲课老师：盛鑫（专家），前百度和360前端架构师  </li>\n<li>课程价格：7980元（前50名）</li>\n</ul>\n</blockquote>\n\n<p>课程的其他问题，可以加上面微信了解。</p>\n\n<h2>资讯</h2>\n\n<p>1、<a href=\"https://www.theguardian.com/environment/2019/jul/14/just-a-matter-of-when-the-20bn-plan-to-power-singapore-with-australian-solar\">新加坡进口澳大利亚太阳能</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071401.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>新加坡由于国土面积太小，无法发展太阳能。上图是世界最大港口之一的新加坡港，已经拥挤不堪，紧邻住宅区了。另一方面，澳大利亚地广人稀，内陆地区有着大片阳光普照的荒漠。</p>\n\n<p>一家私人公司提出了一个计划，在澳大利亚建设一个大型太阳能电厂，然后通过太平洋的海底电缆，将电能输送到新加坡，两国政府都已经表示有兴趣。按照计划，该电厂可以满足新加坡20%的电力需求。如果可行，世界上的荒漠国家就多了一条发展道路。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071402.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>2、<a href=\"https://www.bbc.com/news/business-48998789\">淘汰纸制教科书</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071612.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>美国主要的教科书出版公司 Pearson 宣布，将逐步淘汰纸制教科书，向电子书转变。这家公司目前数字业务的收入，已经超过总收入的一半。</p>\n\n<p>大家都知道，美国的大学教科书是非常贵的，很多学生买不起，只能选择购买二手书或者租用教科书。为了保证收入，书商不得不每三年推出教科书的新版，这是行业的通用做法。Pearson 公司认为，改成电子书以后，对收入更有利，因为可以持续不断地更新教科书，不再是三年一个版本，而是每个月都有新内容，能够推动学生付钱购买。</p>\n\n<p>3、<a href=\"https://arstechnica.com/science/2019/07/american-kids-would-much-rather-be-youtubers-than-astronauts/\">儿童的职业选择</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071701.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>阿波罗11号飞船登月50周年纪念日（7月20日）前夕，乐高公司委托一家民意调查公司，调查了中国、英国和美国的3,000名儿童，让他们选择最想从事的职业。</p>\n\n<p>中国儿童的选择依次是：宇航员、教师、音乐家、体育明星、网络红人。</p>\n\n<p>英美儿童的选择依次是：网络红人、教师、体育明星、音乐家、宇航员。</p>\n\n<p>4、<a href=\"https://earther.gizmodo.com/satellite-images-show-vast-swaths-of-the-arctic-on-fire-1836500468\">北极大火</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072102.jpg\" alt=\"\" title=\"\" /></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072103.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>根据卫星照片，北极圈内多个地点，从阿拉斯加、西伯利亚到格陵兰，目前都是烟雾缭绕，表明那些地方都正在发生森林大火。</p>\n\n<p>今年6月，北极圈的气温是有史以来最高的，很多地方超过30度，异常闷热，干燥高温导致了这些森林火灾。更糟糕的是，火灾会释放大量二氧化碳，进而引起气温进一步升高，而更高的气温又引发了更多的火灾。那些地点都是人迹罕至，不太可能去扑救，只能听任大火燃烧。</p>\n\n<p>5、<a href=\"https://www.forbes.com/sites/zakdoffman/2019/07/17/fbi-and-ftc-told-to-investigate-russias-faceapp-as-u-s-national-security-risk/\">FaceApp 受调查</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072202.jpg\" alt=\"\" title=\"\" /></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072203.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>最近，FaceApp 非常受欢迎，它使用人工智能，给出用户变成老年人的样子，正在病毒式传播。这是一家俄罗斯公司开发的 App，据估计，它至少已经有了1.5亿人的面孔数据。</p>\n\n<p>美国一个前参议员认为，这已经构成了对国家安全的威胁，要求联邦调查局介入调查，美国公民的面孔和其他个人数据是否将被发送和存储到俄罗斯。</p>\n\n<p>6、<a href=\"https://tech.fb.com/ai-is-supercharging-the-creation-of-maps-around-the-world/\">AI 绘制地图</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072403.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>人工绘制地图，通常很慢，标识道路、高速公路、桥梁等，需要大量的投入。Facebook 开发了一个人工智能系统，可以从卫星照片自动生成地图。上图中，白色线条是现有道路，粉红色线条是人工智能识别出来的道路。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072404.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>这套系统可以识别出上图中的河边小道，因此对地理信息不全的农村地区尤其有用。该系统已经补全了泰国和印尼现有地图缺失的道路，将泰国地图的道路总里程，从28万英里增加到了60万英里。传统方法需要三到五年，它只用了18个月。</p>\n\n<p>下图是用来训练的卫星照片，白色线条是需要发现的道路。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072405.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>7、<a href=\"https://www.zdnet.com/article/siemens-contractor-pleads-guilty-to-planting-logic-bomb-in-company-spreadsheets/\">软件外包的风险</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072508.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>西门子公司的很多软件都是外包开发的。一个外包程序员在软件里面留下了一个逻辑炸弹，设置在指定日期后触发，会使得软件崩溃。</p>\n\n<p>结果，2014年开始，软件就发生故障了。西门子只能打电话找那个外包程序员，付费让他修复。这种情况发生了多次，直到2016年5月，才有西门子员工发现这是故意留下的逻辑炸弹。目前，该外包程序员已经认罪，等待法庭判决，面临最高10年的监禁，罚款25万美元。</p>\n\n<p>8、<strong>一句话消息</strong></p>\n\n<blockquote>\n  <ul>\n<li><a href=\"https://vt.co/sci-tech/innovation/costa-rica-just-run-100-percent-renewable-energy-300-days/\">哥斯达黎加</a>是中美洲的岛国，500万人口，已经完全使用可再生能源运行了300天。目前，全国所有电力都来自水力、地热、风能和太阳能。<br><br></li>\n<li><a href=\"https://www.scientificamerican.com/article/worlds-largest-nuclear-fusion-experiment-clears-milestone/\">世界第一个商用的核聚变反应堆</a>，官方宣布已经取得重大进展，将于2025年12月正式运营。</li>\n</ul>\n</blockquote>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072501.jpg\" alt=\"\" title=\"\" /></p>\n\n<blockquote>\n  <ul>\n<li><a href=\"https://twitter.com/hackermaderas/status/1132774476389801989\">炸弹无人机</a>的实物被贴到了推特，可以编程指定飞行轨迹，具有12分钟飞行时间，或20分钟滞空时间。难以想象，这种武器普及的后果。</li>\n</ul>\n</blockquote>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072505.jpg\" alt=\"\" title=\"\" /></p>\n\n<blockquote>\n  <ul>\n<li><a href=\"https://www.wsj.com/articles/a-gigantic-gold-coin-makes-its-way-to-wall-street-11563278400?mod=rsswn\">澳大利亚珀斯造币厂</a>在纽约华尔街的马路上，展示世界最大的金币，重达一吨，价值4500万美元。</li>\n</ul>\n</blockquote>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072502.jpg\" alt=\"\" title=\"\" /></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072503.jpg\" alt=\"\" title=\"\" /></p>\n\n<h2>文章</h2>\n\n<p>1、<a href=\"https://news.ycombinator.com/item?id=20480915\">如何识别无头浏览器</a>（英文）</p>\n\n<p>命令行抓取网页，往往使用无头浏览器，比如 Puppeteer 这样的工具。怎样才能区分正常的访问与无头浏览器呢？本文提供了一个方法。</p>\n\n<p>2、<a href=\"http://www.sohu.com/a/250780697_100136930\">太空中如何大小便? </a>（中文）</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072012.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>太空没有重力，所有东西都是漂浮的，大小便成了棘手的问题。本文介绍美国宇航局如何在零重力的太空环境，解决宇航员的大小便问题。</p>\n\n<p>上图是国际空间站的马桶，这里的关键是屁股与马桶之间不能有空气泄漏，这样就可以用气压吸走排泄物。</p>\n\n<p>3、<a href=\"http://mishravikas.com/articles/2019-07/bypassing-anti-incognito-detection-google-chrome.html\">如何识别 Chrome 浏览器的隐身模式</a>（英文）</p>\n\n<p>隐身模式用来防止网站追踪用户。有时，开发者可能希望识别，哪些用户正在使用隐身模式。本文介绍可用的方法。</p>\n\n<p>4、<a href=\"https://baike.baidu.com/item/%E5%8D%8E%E4%B8%BA%E5%9F%BA%E6%9C%AC%E6%B3%95\">华为基本法</a>（中文）</p>\n\n<p>华为公司1998年通过的一份公司纲领性文件，详细阐述了公司的原则和管理方法，长达1.7万字。第一条就明确写明，华为是一家信息设备供应商，永远不进入信息服务业。</p>\n\n<p>5、<a href=\"http://rickcarlino.com/2019/07/20/what-were-cgi-scripts-html.html\">什么是 CGI 脚本？</a>（英文）</p>\n\n<p>CGI 是\"通用网关接口\"的缩写，用来将任意脚本接入 Web 服务器，处理 HTTP 请求。它属于诞生于互联网早期的一种技术，如果网站访问量不大，现在依然可以使用。学习它有助于深入理解后端的 Web 实现。</p>\n\n<p>6、<a href=\"https://resources.whitesourcesoftware.com/blog-whitesource/what-is-cve-vulnerability\">什么是 CVE 漏洞？</a>（英文）</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072311.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>软件漏洞经常有一个 CVE 编号，比如 CVE-2018-8589，这个编号是什么意思？它是怎么来的？请看这篇英语的简单介绍。</p>\n\n<p>7、<a href=\"https://www.fastcompany.com/90334451/27-incredibly-useful-things-you-didnt-know-google-sheets-could-do\">谷歌表格的27个诀窍</a>（英文）</p>\n\n<p>谷歌表格（Google Sheet）的功能非常强大，本文介绍27个很有用、但是你可能不知道的使用诀窍。</p>\n\n<p>8、<a href=\"https://waifulabs.com/blog/ax\">制造美少女卡通头像自动售货机</a>（英文）</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072406.jpg\" alt=\"\" title=\"\" /></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072410.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>一个旧金山的动漫团队，在动漫展览会上搭建了一个美少女卡通头像的\"自动售货机\"（上图）。</p>\n\n<p>用户付款后，可以选择一个头像，然后对头像进行发型和颜色的调整，最后打印出来，拿到头像证书。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072408.jpg\" alt=\"\" title=\"\" /></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072409.jpg\" alt=\"\" title=\"\" /></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072407.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>9、<a href=\"https://www.vulture.com/2019/07/motion-smoothing-is-ruining-cinema.html\">运动平滑正在破坏电影</a>（英文）</p>\n\n<p>电影每秒是24帧，电视机的刷新率是 60Hz ~ 240Hz，这导致电视机播放电影时，有时会产生不连贯的现象。为了减轻这个问题，现在的电视机都默认开启了\"运功平滑\"功能，会在电影的每帧之间自动插入新的帧。很多电影工作者认为，这种功能对电影艺术的破坏，大于它带来的好处。</p>\n\n<p>10、<a href=\"https://mitchum.blog/how-to-build-minesweeper-with-javascript/\">如何使用 JavaScript 写一个扫雷游戏</a>（英文）</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019072504.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>作者讲解如何用 JavaScript 写一个网页的扫雷游戏。</p>\n\n<p>11、<a href=\"https://nextfe.com/jetbrains-ide-shortcuts/\">JetBrains IDE 基本快捷键</a>（中文）</p>\n\n<p>IntelliJ 的快捷键绝大部分同样适用于其他 JetBrains IDE，包括前端开发常用的 WebStorm 和 Android 开发常用的 Android Studio。掌握这些快捷键能使你成为一个更娴熟的软件开发者。（@<a href=\"https://github.com/ruanyf/weekly/issues/709\">Alice-sos</a> 投稿）</p>\n\n<h2>工具</h2>\n\n<p>1、<a href=\"https://hub.github.com/\">hub</a></p>\n\n<p>GitHub 官方的命令行客户端。</p>\n\n<p>2、<a href=\"https://www.zenflowchart.com/\">Zen Flowchart</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019070801.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>简单好用的在线流程图工具。</p>\n\n<p>3、<a href=\"https://github.com/shubhampathak/autosetup\">autosetup</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019070802.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>一个 Bash 脚本，可以在 Debian 系的发行版上，让用户通过图形界面，一次性选择所要安装的应用程序，主要用于新系统的装机。</p>\n\n<p>4、<a href=\"https://github.com/johnfactotum/foliate\">foliate</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071002.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>一个使用 GTK 图形框架的 Epub 桌面阅读器，只支持 Linux 系统。</p>\n\n<p>5、<a href=\"https://github.com/pixelfed/pixelfed\">pixelfed</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071003.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>照片分享服务 Instagram 的开源替代品，基于 ActivityPub 协议，可以与其他平台交换信息。</p>\n\n<p>6、<a href=\"https://mianbaoduo.com/\">面包多</a></p>\n\n<p>创造者出售数字作品的平台。你上传作品，设定价格，在这个平台出售。（@<a href=\"https://github.com/ruanyf/weekly/issues/671\">wdkwdkwdk</a> 投稿）</p>\n\n<p>7、<a href=\"https://github.com/dongyuwei/hallelujahIM\">哈利路亚英文输入法</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071302.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>这是 Mac 平台上一款智能英语输入法，可以提示单词拼写和中文解释。（@<a href=\"https://github.com/ruanyf/weekly/issues/672\">dongyuwei</a> 投稿）</p>\n\n<p>8、<a href=\"https://github.com/Coder-JJ/rc-leaflet\">rc-leaflet</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071304.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>一个基于 Leaflet 地图引擎的 React 地图组件库。（@<a href=\"https://github.com/ruanyf/weekly/issues/675\">Coder-JJ</a> 投稿）</p>\n\n<p>9、<a href=\"https://github.com/alipay/SoloPi\">SoloPi</a></p>\n\n<p>支付宝推出的安卓应用自动化测试工具。公测版拥有录制回放、性能测试、一机多控三项主要功能，能为测试开发人员节省宝贵时间。（@<a href=\"https://github.com/ruanyf/weekly/issues/676\">ifrontend-xyz</a> 投稿）</p>\n\n<p>10、<a href=\"https://www.coolapk.com/apk/me.bakumon.moneykeeper\">那样记账</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071305.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>一个安卓的记账 App，有报表和图表功能，支持多个账户。（@<a href=\"https://github.com/ruanyf/weekly/issues/677\">Chloe-Y</a> 投稿）</p>\n\n<p>11、<a href=\"https://github.com/Haixiang6123/overwatch-ui\">守望先锋 UI 组件库</a></p>\n\n<p>一个《守望先锋》游戏风格的组件库，基于 Vue.js。（@<a href=\"https://github.com/ruanyf/weekly/issues/679\">Haixiang6123</a> 投稿）</p>\n\n<h2>资源</h2>\n\n<p>1、<a href=\"https://github.com/guanguans/favorite-link\">favorite-link</a></p>\n\n<p>笔记仓库，收集各种开发工具和资源的链接，每日更新。(@<a href=\"https://github.com/ruanyf/weekly/issues/666\">machunyugit</a> 投稿)</p>\n\n<p>2、<a href=\"https://mirrors.cloud.tencent.com/\">腾讯云软件源</a></p>\n\n<p>腾讯云提供的各种开源软件的下载镜像，更多类似的镜像请看<a href=\"https://github.com/ruanyf/weekly/issues/663#issuecomment-509151513\">这里</a>。（@<a href=\"https://github.com/ruanyf/weekly/issues/663\">CmderQ</a> 投稿）</p>\n\n<p>3、<a href=\"https://www.c82.net/twining/plants/\">植物画册</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071005.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>1865年，英国著名女插画家 Elizabeth Twining 出版了二卷本的《植物画册》，包含160幅全彩色的植物插图。该网站将这160幅画都上线，可以下载。打印出来，挂在墙上是很好的装饰品。</p>\n\n<p>4、<a href=\"https://www.plainlanguage.gov/guidelines/words/use-simple-words-phrases/\">简单英语指南</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071108.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>美国政府的官方网页，有几百条单词建议，指导你怎么写出简单的文章，不要用复杂的单词。比如说，\"a 和 b 可以同时使用，也可以单独使用\"，不要用<code>a and/or b</code>，而要用<code>a or b or both</code>。</p>\n\n<p>5、<a href=\"https://github.com/No-Github/Digital-Privacy\">数字隐私档案</a></p>\n\n<p>该仓库收集互联网上保护用户隐私的各种工具和方案。（@<a href=\"https://github.com/ruanyf/weekly/issues/670\">No-Github</a> 投稿）</p>\n\n<p>6、<a href=\"https://tophub.today/\">今日热榜</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019071303.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>这是一个信息聚合服务，聚合各站热点，包括微信、今日头条、百度、知乎、V2EX、微博、贴吧、豆瓣、天涯、虎扑、Github、华尔街见闻等，有 Web 版和 App 下载。</p>\n\n<h2>图片</h2>\n\n<p>1、<strong>DOS 图形界面</strong></p>\n\n<p>下面是上个世纪90年代前期，Windows 3.1 发布之前，典型的 MS-DOS 图形界面。20多年前的大众软件就是长这个样子。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201906/bg2019063004.jpg\" alt=\"\" title=\"\" /></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201906/bg2019063005.jpg\" alt=\"\" title=\"\" /></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201906/bg2019063006.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>2、<a href=\"https://developer.apple.com/documentation/contacts/cnlabelcontactrelationyoungercousinmotherssiblingsdaughterorfatherssistersdaughter\">iOS 13 的全局变量</a></p>\n\n<p>iOS 13 有一些非常冗长的全局变量，用于联系人标签，比如下图这个变量，长达82个字符，翻译成中文，意思是\"表妹或堂妹\"。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201907/bg2019070403.jpg\" alt=\"\" title=\"\" /></p>\n\n<h2>文摘</h2>\n\n<p>1、<a href=\"https://phys.org/news/2019-07-instability-antarctic-ice-sea-rapidly.html\">为什么北极融化不会导致海平面上升？</a></p>\n\n<p>北极都是海冰，漂浮在水中。我们知道，冰山质量的90％都在水下。当冰融化变成水时，体积会缩小，所以不会导致海平面变化。</p>\n\n<p>但是，南极完全不一样，冰山基本都在陆地上。当陆地冰川融化时，就会导致海平面上升。南极洲的冰量是世界上其他陆地冰川总和的50倍。</p>\n\n<p>有研究称，过去2000年，海平面保持稳定。但是从1990年以来，海平面上升速度增加了一倍。据估计，到本世纪末，海平面预计将上升2英尺（61厘米）。</p>\n\n<p>2、<a href=\"https://www.manhattan-institute.org/green-energy-revolution-near-impossible\">新能源的极限</a></p>\n\n<p>目前，石油、天然气、煤等碳氢化合物，提供了全世界84％的能源。风能和太阳能提供了全世界2%的能源。</p>\n\n<p>尽管如此，许多人还是主张尽快把所有碳氢化合物都替代掉，并称其为\"新能源经济\"。</p>\n\n<p>但是，风能，太阳能和电池存储技术有其极限，全世界近期几乎不可能向\"新能源经济\"过渡。原因如下：</p>\n\n<p>（1）碳氢化合物有低成本、高能量密度、稳定性、安全性和便携性等卓越的优点，科学家尚未发现跟它们一样优秀的替代物。</p>\n\n<p>目前，在风力涡轮发电机或太阳能电池板上投入100万美元，每年产生约5000万度电，但是在页岩钻井平台上花费100万美元，生产的天然气可以产生2亿度电。</p>\n\n<p>（2）硅光伏电池有物理极限，称为 Shockley-Queisser Limit，即最多只有 34％的光子可以转换为电子。今天最好的商业光伏技术，转化率已经超过26％。</p>\n\n<p>（3）风力发电机的物理极限是 Betz Limit，即最多只能从移动的空气中捕获 60％ 的动能。今天的商用风力涡轮机，转化率已经超过 40％。</p>\n\n<p>（4）世界最大的电池工厂特斯拉的 Gigafactory，一年生产的电池只能支撑全美国的用电需求三分钟。连续生产1000年的电池，可以支撑美国两天的电力需求。与此同时，每生产一磅电池，需要开采、移动和加工50-100磅的各种材料。</p>\n\n<h2>言论</h2>\n\n<p>1、</p>\n\n<p>美国癌症协会、FDA 和许多其他组织强烈反对食用鱼翅，或者食用鲨鱼肝油，认为效果跟吃自己的指甲差不多。</p>\n\n<p>-- <a href=\"https://www.treehugger.com/animals/what-would-world-without-sharks-be.html\">《没有鲨鱼的世界会怎样？》</a></p>\n\n<p>2、</p>\n\n<p>多年使用 Vim 之后，我有一个顿悟：如果坚持使用默认配置，就可以在任何环境中毫无困难地使用 Vim。</p>\n\n<p>-- <a href=\"https://news.ycombinator.com/item?id=20481729\">HN 读者留言</a></p>\n\n<p>3、</p>\n\n<p>人生所有的事情之中，后悔是最可怕的。失败是一种答案，拒绝也是一种答案，但后悔却是永远得不到答案。\"要是我当初......\"、\"如果我那样选了......\"、\"不知道如果走了那条路会怎样......\"，你永远、永远都不会知道答案，而且这些疑问会纠缠你一辈子。</p>\n\n<p>--  [南非] 特雷弗·诺亚<a href=\"https://book.douban.com/subject/30125030/\">《天生有罪》</a></p>\n\n<p>4、</p>\n\n<p>只有落后者才说抓住机会，发达国家是创造机会，引导消费。</p>\n\n<p>-- 任正非</p>\n\n<p>5、</p>\n\n<p>每节课的时间，对于老师来说太短，对于学生来说太长了。</p>\n\n<p>-- <a href=\"http://teachtogether.tech/\">《如何创建一个有效的课程》</a></p>\n\n<h2>招聘信息</h2>\n\n<p>以下公司正在招聘，欢迎应聘。</p>\n\n<p>本栏目为收费服务，每条价格 250 元人民币，用于资助周刊。如果你的公司正在招人，欢迎联系我（Email:  <a href=\"mailto:yifeng.ruan@gmail.com\">yifeng.ruan@gmail.com</a>）。</p>\n\n<p><a href=\"https://github.com/ruanyf/weekly/issues/692\">讨论区</a>有更多职位，欢迎大家访问。</p>\n\n<p>1、<strong>秘猿科技</strong></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201908/bg2019080701.png\" alt=\"\" title=\"\" /></p>\n\n<p>区块链创业公司，为加密经济提供区块链基础设施和服务，主要产品有 Nervos、火币金融公链、CITA 等。工作地点：杭州 或者 remote。</p>\n\n<p>诚意招聘以下岗位：</p>\n\n<blockquote>\n  <ul>\n<li>高级区块链工程师：需要熟悉 Rust 语言。</li>\n<li>高级后端工程师：熟悉分布式系统开发。</li>\n<li>首席安全官：5年以上安全从业经验。</li>\n<li>高级测试经理：从事区块链底层的自动化测试。</li>\n</ul>\n</blockquote>\n\n<p>详细招聘要求，欢迎点击<a href=\"https://github.com/ruanyf/weekly/issues/692#issuecomment-518962331\">这里</a>。</p>\n\n<p>简历投递：<a href=\"mail:zhouyun@cryptape.com\">zhouyun@cryptape.com</a> （一天内回复）</p>\n\n<h2>回顾</h2>\n\n<p>去年的本周：<a href=\"http://www.ruanyifeng.com/blog/2018/08/weekly-issue-16.html\">《周刊第 16 期》</a></p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201808/bg2018080301.jpg\" alt=\"\" title=\"\" /></p>\n\n<h2>订阅</h2>\n\n<p>这个周刊每周五发布，同步更新在<a href=\"http://www.ruanyifeng.com/blog\">阮一峰的网络日志</a>、<a href=\"http://weixin.sogou.com/weixin?query=%E9%98%AE%E4%B8%80%E5%B3%B0%E7%9A%84%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97\">微信公众号</a>和<a href=\"https://yuque.com/ruanyf/share/\">语雀</a>。</p>\n\n<p>微信搜索\"阮一峰的网络日志\"或者扫描二维码，即可订阅。</p>\n\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018042311.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>（完）</p>\n\n        <div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#AAD2F0;-moz-border-radius: 10px;-webkit-border-radius:10px;border-radius: 10px;\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名（<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">创意共享3.0许可证</a>）</li>\n<li>发表日期： <abbr class=\"published\" title=\"2019-08-09T09:50:59+08:00\">2019年8月 9日</abbr></li>\n\n</ul></div>        \n        <div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;-moz-border-radius: 10px;-webkit-border-radius:10px;border-radius: 10px;\"></div>"
        }
      ],
      "published": "2019-08-09T01:50:59Z",
      "guidislink": false,
      "link": "http://www.ruanyifeng.com/blog/2019/08/weekly-issue-68.html",
      "updated_parsed": [
        2019,
        8,
        15,
        11,
        18,
        32,
        3,
        227,
        0
      ],
      "title_detail": {
        "base": "http://www.ruanyifeng.com/blog/atom.xml",
        "type": "text/plain",
        "language": null,
        "value": "科技爱好者周刊：第 68 期"
      },
      "title": "科技爱好者周刊：第 68 期",
      "author": "阮一峰",
      "summary_detail": {
        "base": "http://www.ruanyifeng.com/blog/atom.xml",
        "type": "text/plain",
        "language": null,
        "value": "这里记录每周值得分享的科技内容，周五发布。..."
      },
      "href": "http://www.ruanyifeng.com",
      "id": "tag:www.ruanyifeng.com,2019:/blog//1.2108",
      "published_parsed": [
        2019,
        8,
        9,
        1,
        50,
        59,
        4,
        221,
        0
      ],
      "tags": [
        {
          "term": "Weekly",
          "label": null,
          "scheme": "http://www.sixapart.com/ns/types#category"
        }
      ],
      "links": [
        {
          "rel": "alternate",
          "type": "text/html",
          "href": "http://www.ruanyifeng.com/blog/2019/08/weekly-issue-68.html"
        }
      ]
    },
    {
      "authors": [
        {
          "name": "阮一峰",
          "href": "http://www.ruanyifeng.com"
        }
      ],
      "author_detail": {
        "name": "阮一峰",
        "href": "http://www.ruanyifeng.com"
      },
      "summary": "xargs是 Unix 系统的一个很有用的命令，但是常常被忽视，很多人不了解它的用法。...",
      "updated": "2019-08-15T02:41:43Z",
      "content": [
        {
          "base": "http://www.ruanyifeng.com/blog/",
          "type": "text/html",
          "language": "en",
          "value": "<p><code>xargs</code>是 Unix 系统的一个很有用的命令，但是常常被忽视，很多人不了解它的用法。</p>\n\n        <p>本文介绍如何使用这个命令。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201908/bg2019080802.jpg\" alt=\"\" title=\"\" /></p>\n\n<h2>一、标准输入与管道命令</h2>\n\n<p>Unix 命令都带有参数，有些命令可以接受\"标准输入\"（stdin）作为参数。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ cat /etc/passwd | grep root\n</code></pre></blockquote>\n\n<p>上面的代码使用了管道命令（<code>|</code>）。管道命令的作用，是将左侧命令（<code>cat /etc/passwd</code>）的标准输出转换为标准输入，提供给右侧命令（<code>grep root</code>）作为参数。</p>\n\n<p>因为<code>grep</code>命令可以接受标准输入作为参数，所以上面的代码等同于下面的代码。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ grep root /etc/passwd\n</code></pre></blockquote>\n\n<p>但是，大多数命令都不接受标准输入作为参数，只能直接在命令行输入参数，这导致无法用管道命令传递参数。举例来说，<code>echo</code>命令就不接受管道传参。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ echo \"hello world\" | echo\n</code></pre></blockquote>\n\n<p>上面的代码不会有输出。因为管道右侧的<code>echo</code>不接受管道传来的标准输入作为参数。</p>\n\n<h2>二、xargs 命令的作用</h2>\n\n<p><code>xargs</code>命令的作用，是将标准输入转为命令行参数。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ echo \"hello world\" | xargs echo\nhello world\n</code></pre></blockquote>\n\n<p>上面的代码将管道左侧的标准输入，转为命令行参数<code>hello world</code>，传给第二个<code>echo</code>命令。</p>\n\n<p><code>xargs</code>命令的格式如下。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ xargs [-options] [command]\n</code></pre></blockquote>\n\n<p>真正执行的命令，紧跟在<code>xargs</code>后面，接受<code>xargs</code>传来的参数。</p>\n\n<p><code>xargs</code>的作用在于，大多数命令（比如<code>rm</code>、<code>mkdir</code>、<code>ls</code>）与管道一起使用时，都需要<code>xargs</code>将标准输入转为命令行参数。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ echo \"one two three\" | xargs mkdir\n</code></pre></blockquote>\n\n<p>上面的代码等同于<code>mkdir one two three</code>。如果不加<code>xargs</code>就会报错，提示<code>mkdir</code>缺少操作参数。</p>\n\n<h2>三、xargs 的单独使用</h2>\n\n<p><code>xargs</code>后面的命令默认是<code>echo</code>。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ xargs\n# 等同于\n$ xargs echo\n</code></pre></blockquote>\n\n<p>大多数时候，<code>xargs</code>命令都是跟管道一起使用的。但是，它也可以单独使用。</p>\n\n<p>输入<code>xargs</code>按下回车以后，命令行就会等待用户输入，作为标准输入。你可以输入任意内容，然后按下<code>Ctrl d</code>，表示输入结束，这时<code>echo</code>命令就会把前面的输入打印出来。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ xargs\nhello (Ctrl + d)\nhello\n</code></pre></blockquote>\n\n<p>再看一个例子。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ xargs find -name\n\"*.txt\"\n./foo.txt\n./hello.txt\n</code></pre></blockquote>\n\n<p>上面的例子输入<code>xargs find -name</code>以后，命令行会等待用户输入所要搜索的文件。用户输入<code>\"*.txt\"</code>，表示搜索当前目录下的所有 TXT 文件，然后按下<code>Ctrl d</code>，表示输入结束。这时就相当执行<code>find -name *.txt</code>。</p>\n\n<h2>四、-d 参数与分隔符</h2>\n\n<p>默认情况下，<code>xargs</code>将换行符和空格作为分隔符，把标准输入分解成一个个命令行参数。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ echo \"one two three\" | xargs mkdir\n</code></pre></blockquote>\n\n<p>上面代码中，<code>mkdir</code>会新建三个子目录，因为<code>xargs</code>将<code>one two three</code>分解成三个命令行参数，执行<code>mkdir one two three</code>。</p>\n\n<p><code>-d</code>参数可以更改分隔符。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ echo -e \"a\\tb\\tc\" | xargs -d \"\\t\" echo\na b c\n</code></pre></blockquote>\n\n<p>上面的命令指定制表符<code>\\t</code>作为分隔符，所以<code>a\\tb\\tc</code>就转换成了三个命令行参数。<code>echo</code>命令的<code>-e</code>参数表示解释转义字符。</p>\n\n<h2>五、-p 参数，-t 参数</h2>\n\n<p>使用<code>xargs</code>命令以后，由于存在转换参数过程，有时需要确认一下到底执行的是什么命令。</p>\n\n<p><code>-p</code>参数打印出要执行的命令，询问用户是否要执行。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ echo 'one two three' | xargs -p touch\ntouch one two three ?...\n</code></pre></blockquote>\n\n<p>上面的命令执行以后，会打印出最终要执行的命令，让用户确认。用户输入<code>y</code>以后（大小写皆可），才会真正执行。</p>\n\n<p><code>-t</code>参数则是打印出最终要执行的命令，然后直接执行，不需要用户确认。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ echo 'one two three' | xargs -t rm\nrm one two three\n</code></pre></blockquote>\n\n<h2>六、-0 参数与 find 命令</h2>\n\n<p>由于<code>xargs</code>默认将空格作为分隔符，所以不太适合处理文件名，因为文件名可能包含空格。</p>\n\n<p><code>find</code>命令有一个特别的参数<code>-print0</code>，指定输出的文件列表以<code>null</code>分隔。然后，<code>xargs</code>命令的<code>-0</code>参数表示用<code>null</code>当作分隔符。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ find /path -type f -print0 | xargs -0 rm\n</code></pre></blockquote>\n\n<p>上面命令删除<code>/path</code>路径下的所有文件。由于分隔符是<code>null</code>，所以处理包含空格的文件名，也不会报错。</p>\n\n<p>还有一个原因，使得<code>xargs</code>特别适合<code>find</code>命令。有些命令（比如<code>rm</code>）一旦参数过多会报错\"参数列表过长\"，而无法执行，改用<code>xargs</code>就没有这个问题，因为它对每个参数执行一次命令。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ find . -name \"*.txt\" | xargs grep \"abc\"\n</code></pre></blockquote>\n\n<p>上面命令找出所有 TXT 文件以后，对每个文件搜索一次是否包含字符串<code>abc</code>。</p>\n\n<h2>七、-L 参数</h2>\n\n<p>如果标准输入包含多行，<code>-L</code>参数指定多少行作为一个命令行参数。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ xargs find -name\n\"*.txt\"   \n\"*.md\"\nfind: paths must precede expression: `*.md'\n</code></pre></blockquote>\n\n<p>上面命令同时将<code>\"*.txt\"</code>和<code>*.md</code>两行作为命令行参数，传给<code>find</code>命令导致报错。</p>\n\n<p>使用<code>-L</code>参数，指定每行作为一个命令行参数，就不会报错。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ xargs -L 1 find -name\n\"*.txt\"\n./foo.txt\n./hello.txt\n\"*.md\"\n./README.md\n</code></pre></blockquote>\n\n<p>上面命令指定了每一行（<code>-L 1</code>）作为命令行参数，分别运行一次命令（<code>find -name</code>）。</p>\n\n<p>下面是另一个例子。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ echo -e \"a\\nb\\nc\" | xargs -L 1 echo\na\nb\nc\n</code></pre></blockquote>\n\n<p>上面代码指定每行运行一次<code>echo</code>命令，所以<code>echo</code>命令执行了三次，输出了三行。</p>\n\n<h2>八、-n 参数</h2>\n\n<p><code>-L</code>参数虽然解决了多行的问题，但是有时用户会在同一行输入多项。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ xargs find -name\n\"*.txt\" \"*.md\"\nfind: paths must precede expression: `*.md'\n</code></pre></blockquote>\n\n<p>上面的命令将同一行的两项作为命令行参数，导致报错。</p>\n\n<p><code>-n</code>参数指定每次将多少项，作为命令行参数。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ xargs -n 1 find -name\n</code></pre></blockquote>\n\n<p>上面命令指定将每一项（<code>-n 1</code>）标准输入作为命令行参数，分别执行一次命令（<code>find -name</code>）。</p>\n\n<p>下面是另一个例子。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ echo {0..9} | xargs -n 2 echo\n0 1\n2 3\n4 5\n6 7\n8 9\n</code></pre></blockquote>\n\n<p>上面命令指定，每两个参数运行一次<code>echo</code>命令。所以，10个阿拉伯数字运行了五次<code>echo</code>命令，输出了五行。</p>\n\n<h2>九、-I 参数</h2>\n\n<p>如果<code>xargs</code>要将命令行参数传给多个命令，可以使用<code>-I</code>参数。</p>\n\n<p><code>-I</code>指定每一项命令行参数的替代字符串。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ cat foo.txt\none\ntwo\nthree\n\n$ cat foo.txt | xargs -I file sh -c 'echo file; mkdir file'\none \ntwo\nthree\n\n$ ls \none two three\n</code></pre></blockquote>\n\n<p>上面代码中，<code>foo.txt</code>是一个三行的文本文件。我们希望对每一项命令行参数，执行两个命令（<code>echo</code>和<code>mkdir</code>），使用<code>-I file</code>表示<code>file</code>是命令行参数的替代字符串。执行命令时，具体的参数会替代掉<code>echo file; mkdir file</code>里面的两个<code>file</code>。</p>\n\n<h2>十、--max-procs 参数</h2>\n\n<p><code>xargs</code>默认只用一个进程执行命令。如果命令要执行多次，必须等上一次执行完，才能执行下一次。</p>\n\n<p><code>--max-procs</code>参数指定同时用多少个进程并行执行命令。<code>--max-procs 2</code>表示同时最多使用两个进程，<code>--max-procs 0</code>表示不限制进程数。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ docker ps -q | xargs -n 1 --max-procs 0 docker kill\n</code></pre></blockquote>\n\n<p>上面命令表示，同时关闭尽可能多的 Docker 容器，这样运行速度会快很多。</p>\n\n<h2>十一、参考链接</h2>\n\n<ul>\n<li><a href=\"https://shapeshed.com/unix-xargs/\">Linux and Unix xargs command tutorial with examples</a>, George Ornbo</li>\n<li><a href=\"https://www.howtoforge.com/tutorial/linux-xargs-command/\">8 Practical Examples of Linux Xargs Command for Beginners</a>, Himanshu Arora</li>\n</ul>\n\n<p>（完）</p>\n\n        <div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#AAD2F0;-moz-border-radius: 10px;-webkit-border-radius:10px;border-radius: 10px;\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名（<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">创意共享3.0许可证</a>）</li>\n<li>发表日期： <abbr class=\"published\" title=\"2019-08-08T12:58:40+08:00\">2019年8月 8日</abbr></li>\n\n</ul></div>        \n        <div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;-moz-border-radius: 10px;-webkit-border-radius:10px;border-radius: 10px;\"></div>"
        }
      ],
      "published": "2019-08-08T04:58:40Z",
      "guidislink": false,
      "link": "http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html",
      "updated_parsed": [
        2019,
        8,
        15,
        2,
        41,
        43,
        3,
        227,
        0
      ],
      "title_detail": {
        "base": "http://www.ruanyifeng.com/blog/atom.xml",
        "type": "text/plain",
        "language": null,
        "value": "xargs 命令教程"
      },
      "title": "xargs 命令教程",
      "author": "阮一峰",
      "summary_detail": {
        "base": "http://www.ruanyifeng.com/blog/atom.xml",
        "type": "text/plain",
        "language": null,
        "value": "xargs是 Unix 系统的一个很有用的命令，但是常常被忽视，很多人不了解它的用法。..."
      },
      "href": "http://www.ruanyifeng.com",
      "id": "tag:www.ruanyifeng.com,2019:/blog//1.2107",
      "published_parsed": [
        2019,
        8,
        8,
        4,
        58,
        40,
        3,
        220,
        0
      ],
      "tags": [
        {
          "term": "Developer",
          "label": null,
          "scheme": "http://www.sixapart.com/ns/types#category"
        }
      ],
      "links": [
        {
          "rel": "alternate",
          "type": "text/html",
          "href": "http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html"
        }
      ]
    },
    {
      "authors": [
        {
          "name": "阮一峰",
          "href": "http://www.ruanyifeng.com"
        }
      ],
      "author_detail": {
        "name": "阮一峰",
        "href": "http://www.ruanyifeng.com"
      },
      "summary": "组件是前端的发展方向，现在流行的 React 和 Vue 都是组件框架。...",
      "updated": "2019-08-14T09:09:27Z",
      "content": [
        {
          "base": "http://www.ruanyifeng.com/blog/",
          "type": "text/html",
          "language": "en",
          "value": "<p>组件是前端的发展方向，现在流行的 React 和 Vue 都是组件框架。</p>\n\n        <p>谷歌公司由于掌握了 Chrome 浏览器，一直在推动浏览器的原生组件，即 <a href=\"https://www.webcomponents.org/introduction\">Web Components API</a>。相比第三方框架，原生组件简单直接，符合直觉，不用加载任何外部模块，代码量小。目前，它还在不断发展，但已经可用于生产环境。</p>\n\n<p>Web Components API 内容很多，本文不是全面的教程，只是一个简单演示，让大家看一下怎么用它开发组件。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201908/bg2019080604.jpg\" alt=\"\" title=\"\" /></p>\n\n<h2>一、自定义元素</h2>\n\n<p>下图是一个用户卡片。</p>\n\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201908/bg2019080405.jpg\" alt=\"\" title=\"\" /></p>\n\n<p>本文演示如何把这个卡片，写成 Web Components 组件，这里是最后的<a href=\"https://jsbin.com/yobopor/1/edit?html,js,output\">完整代码</a>。</p>\n\n<p>网页只要插入下面的代码，就会显示用户卡片。</p>\n\n<blockquote><pre><code class=\"language-markup\">\n&lt;user-card>&lt;/user-card>\n</code></pre></blockquote>\n\n<p>这种自定义的 HTML 标签，称为自定义元素（custom element）。根据规范，自定义元素的名称必须包含连词线，用与区别原生的 HTML 元素。所以，<code>&lt;user-card&gt;</code>不能写成<code>&lt;usercard&gt;</code>。</p>\n\n<h2>二、<code>customElements.define()</code></h2>\n\n<p>自定义元素需要使用 JavaScript 定义一个类，所有<code>&lt;user-card&gt;</code>都会是这个类的实例。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nclass UserCard extends HTMLElement {\n  constructor() {\n    super();\n  }\n}\n</code></pre></blockquote>\n\n<p>上面代码中，<code>UserCard</code>就是自定义元素的类。注意，这个类的父类是<code>HTMLElement</code>，因此继承了 HTML 元素的特性。</p>\n\n<p>接着，使用浏览器原生的<code>customElements.define()</code>方法，告诉浏览器<code>&lt;user-card&gt;</code>元素与这个类关联。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nwindow.customElements.define('user-card', UserCard);\n</code></pre></blockquote>\n\n<h2>三、自定义元素的内容</h2>\n\n<p>自定义元素<code>&lt;user-card&gt;</code>目前还是空的，下面在类里面给出这个元素的内容。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nclass UserCard extends HTMLElement {\n  constructor() {\n    super();\n\n    var image = document.createElement('img');\n    image.src = 'https://semantic-ui.com/images/avatar2/large/kristy.png';\n    image.classList.add('image');\n\n    var container = document.createElement('div');\n    container.classList.add('container');\n\n    var name = document.createElement('p');\n    name.classList.add('name');\n    name.innerText = 'User Name';\n\n    var email = document.createElement('p');\n    email.classList.add('email');\n    email.innerText = 'yourmail@some-email.com';\n\n    var button = document.createElement('button');\n    button.classList.add('button');\n    button.innerText = 'Follow';\n\n    container.append(name, email, button);\n    this.append(image, container);\n  }\n}\n</code></pre></blockquote>\n\n<p>上面代码最后一行，<code>this.append()</code>的<code>this</code>表示自定义元素实例。</p>\n\n<p>完成这一步以后，自定义元素内部的 DOM 结构就已经生成了。</p>\n\n<h2>四、<code>&lt;template&gt;</code>标签</h2>\n\n<p>使用 JavaScript 写上一节的 DOM 结构很麻烦，Web Components API 提供了<code>&lt;template&gt;</code>标签，可以在它里面使用 HTML 定义 DOM。</p>\n\n<blockquote><pre><code class=\"language-markup\">\n&lt;template id=\"userCardTemplate\">\n  &lt;img src=\"https://semantic-ui.com/images/avatar2/large/kristy.png\" class=\"image\">\n  &lt;div class=\"container\">\n    &lt;p class=\"name\">User Name&lt;/p>\n    &lt;p class=\"email\">yourmail@some-email.com&lt;/p>\n    &lt;button class=\"button\">Follow&lt;/button>\n  &lt;/div>\n&lt;/template>\n</code></pre></blockquote>\n\n<p>然后，改写一下自定义元素的类，为自定义元素加载<code>&lt;template&gt;</code>。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nclass UserCard extends HTMLElement {\n  constructor() {\n    super();\n\n    var templateElem = document.getElementById('userCardTemplate');\n    var content = templateElem.content.cloneNode(true);\n    this.appendChild(content);\n  }\n}  \n</code></pre></blockquote>\n\n<p>上面代码中，获取<code>&lt;template&gt;</code>节点以后，克隆了它的所有子元素，这是因为可能有多个自定义元素的实例，这个模板还要留给其他实例使用，所以不能直接移动它的子元素。</p>\n\n<p>到这一步为止，完整的代码如下。</p>\n\n<blockquote><pre><code class=\"language-markup\">\n&lt;body>\n  &lt;user-card>&lt;/user-card>\n  &lt;template>...&lt;/template>\n\n  &lt;script>\n    class UserCard extends HTMLElement {\n      constructor() {\n        super();\n\n        var templateElem = document.getElementById('userCardTemplate');\n        var content = templateElem.content.cloneNode(true);\n        this.appendChild(content);\n      }\n    }\n    window.customElements.define('user-card', UserCard);    \n  &lt;/script>\n&lt;/body>\n</code></pre></blockquote>\n\n<h2>五、添加样式</h2>\n\n<p>自定义元素还没有样式，可以给它指定全局样式，比如下面这样。</p>\n\n<blockquote><pre><code class=\"language-css\">\nuser-card {\n  /* ... */\n}\n</code></pre></blockquote>\n\n<p>但是，组件的样式应该与代码封装在一起，只对自定义元素生效，不影响外部的全局样式。所以，可以把样式写在<code>&lt;template&gt;</code>里面。</p>\n\n<blockquote><pre><code class=\"language-markup\">\n&lt;template id=\"userCardTemplate\">\n  &lt;style>\n   :host {\n     display: flex;\n     align-items: center;\n     width: 450px;\n     height: 180px;\n     background-color: #d4d4d4;\n     border: 1px solid #d5d5d5;\n     box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.1);\n     border-radius: 3px;\n     overflow: hidden;\n     padding: 10px;\n     box-sizing: border-box;\n     font-family: 'Poppins', sans-serif;\n   }\n   .image {\n     flex: 0 0 auto;\n     width: 160px;\n     height: 160px;\n     vertical-align: middle;\n     border-radius: 5px;\n   }\n   .container {\n     box-sizing: border-box;\n     padding: 20px;\n     height: 160px;\n   }\n   .container > .name {\n     font-size: 20px;\n     font-weight: 600;\n     line-height: 1;\n     margin: 0;\n     margin-bottom: 5px;\n   }\n   .container > .email {\n     font-size: 12px;\n     opacity: 0.75;\n     line-height: 1;\n     margin: 0;\n     margin-bottom: 15px;\n   }\n   .container > .button {\n     padding: 10px 25px;\n     font-size: 12px;\n     border-radius: 5px;\n     text-transform: uppercase;\n   }\n  &lt;/style>\n\n  &lt;img src=\"https://semantic-ui.com/images/avatar2/large/kristy.png\" class=\"image\">\n  &lt;div class=\"container\">\n    &lt;p class=\"name\">User Name&lt;/p>\n    &lt;p class=\"email\">yourmail@some-email.com&lt;/p>\n    &lt;button class=\"button\">Follow&lt;/button>\n  &lt;/div>\n&lt;/template>\n</code></pre></blockquote>\n\n<p>上面代码中，<code>&lt;template&gt;</code>样式里面的<code>:host</code>伪类，指代自定义元素本身。</p>\n\n<h2>六、自定义元素的参数</h2>\n\n<p><code>&lt;user-card&gt;</code>内容现在是在<code>&lt;template&gt;</code>里面设定的，为了方便使用，把它改成参数。</p>\n\n<blockquote><pre><code class=\"language-markup\">\n&lt;user-card\n  image=\"https://semantic-ui.com/images/avatar2/large/kristy.png\"\n  name=\"User Name\"\n  email=\"yourmail@some-email.com\"\n>&lt;/user-card>\n</code></pre></blockquote>\n\n<p><code>&lt;template&gt;</code>代码也相应改造。</p>\n\n<blockquote><pre><code class=\"language-markup\">\n&lt;template id=\"userCardTemplate\">\n  &lt;style>...&lt;/style>\n\n  &lt;img class=\"image\">\n  &lt;div class=\"container\">\n    &lt;p class=\"name\">&lt;/p>\n    &lt;p class=\"email\">&lt;/p>\n    &lt;button class=\"button\">Follow John&lt;/button>\n  &lt;/div>\n&lt;/template>\n</code></pre></blockquote>\n\n<p>最后，改一下类的代码，把参数加到自定义元素里面。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nclass UserCard extends HTMLElement {\n  constructor() {\n    super();\n\n    var templateElem = document.getElementById('userCardTemplate');\n    var content = templateElem.content.cloneNode(true);\n    content.querySelector('img').setAttribute('src', this.getAttribute('image'));\n    content.querySelector('.container>.name').innerText = this.getAttribute('name');\n    content.querySelector('.container>.email').innerText = this.getAttribute('email');\n    this.appendChild(content);\n  }\n}\nwindow.customElements.define('user-card', UserCard);    \n</code></pre></blockquote>\n\n<h2>七、Shadow DOM</h2>\n\n<p>我们不希望用户能够看到<code>&lt;user-card&gt;</code>的内部代码，Web Component 允许内部代码隐藏起来，这叫做 Shadow DOM，即这部分 DOM 默认与外部 DOM 隔离，内部任何代码都无法影响外部。</p>\n\n<p>自定义元素的<code>this.attachShadow()</code>方法开启 Shadow DOM，详见下面的代码。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nclass UserCard extends HTMLElement {\n  constructor() {\n    super();\n    var shadow = this.attachShadow( { mode: 'closed' } );\n\n    var templateElem = document.getElementById('userCardTemplate');\n    var content = templateElem.content.cloneNode(true);\n    content.querySelector('img').setAttribute('src', this.getAttribute('image'));\n    content.querySelector('.container>.name').innerText = this.getAttribute('name');\n    content.querySelector('.container>.email').innerText = this.getAttribute('email');\n\n    shadow.appendChild(content);\n  }\n}\nwindow.customElements.define('user-card', UserCard);\n</code></pre></blockquote>\n\n<p>上面代码中，<code>this.attachShadow()</code>方法的参数<code>{ mode: 'closed' }</code>，表示 Shadow DOM 是封闭的，不允许外部访问。</p>\n\n<p>至此，这个 Web Component 组件就完成了，完整代码可以访问<a href=\"https://jsbin.com/yobopor/1/edit?html,js,output\">这里</a>。可以看到，整个过程还是很简单的，不像第三方框架那样有复杂的 API。</p>\n\n<h2>八、组件的扩展</h2>\n\n<p>在前面的基础上，可以对组件进行扩展。</p>\n\n<p><strong>（1）与用户互动</strong></p>\n\n<p>用户卡片是一个静态组件，如果要与用户互动，也很简单，就是在类里面监听各种事件。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nthis.$button = shadow.querySelector('button');\nthis.$button.addEventListener('click', () => {\n  // do something\n});\n</code></pre></blockquote>\n\n<p><strong>（2）组件的封装</strong></p>\n\n<p>上面的例子中，<code>&lt;template&gt;</code>与网页代码放在一起，其实可以用脚本把<code>&lt;template&gt;</code>注入网页。这样的话，JavaScript 脚本跟<code>&lt;template&gt;</code>就能封装成一个 JS 文件，成为独立的组件文件。网页只要加载这个脚本，就能使用<code>&lt;user-card&gt;</code>组件。</p>\n\n<p>这里就不展开了，更多 Web Components 的高级用法，可以接着学习下面两篇文章。</p>\n\n<blockquote>\n  <ul>\n<li><a href=\"https://www.robinwieruch.de/web-components-tutorial/\">Web Components Tutorial for Beginners</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/web-components/customelements\">Custom Elements v1: Reusable Web Components\n</a></li>\n</ul>\n</blockquote>\n\n<h2>九、参考链接</h2>\n\n<ul>\n<li><a href=\"https://itnext.io/the-anatomy-of-web-components-d6afedb81b37\">The anatomy of Web Components</a>, Uday Hiwarale</li>\n</ul>\n\n<p>（完）</p>\n\n        <div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#AAD2F0;-moz-border-radius: 10px;-webkit-border-radius:10px;border-radius: 10px;\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名（<a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">创意共享3.0许可证</a>）</li>\n<li>发表日期： <abbr class=\"published\" title=\"2019-08-06T17:39:44+08:00\">2019年8月 6日</abbr></li>\n\n</ul></div>        \n        <div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;-moz-border-radius: 10px;-webkit-border-radius:10px;border-radius: 10px;\"></div>"
        }
      ],
      "published": "2019-08-06T09:39:44Z",
      "guidislink": false,
      "link": "http://www.ruanyifeng.com/blog/2019/08/web_components.html",
      "updated_parsed": [
        2019,
        8,
        14,
        9,
        9,
        27,
        2,
        226,
        0
      ],
      "title_detail": {
        "base": "http://www.ruanyifeng.com/blog/atom.xml",
        "type": "text/plain",
        "language": null,
        "value": "Web Components 入门实例教程"
      },
      "title": "Web Components 入门实例教程",
      "author": "阮一峰",
      "summary_detail": {
        "base": "http://www.ruanyifeng.com/blog/atom.xml",
        "type": "text/plain",
        "language": null,
        "value": "组件是前端的发展方向，现在流行的 React 和 Vue 都是组件框架。..."
      },
      "href": "http://www.ruanyifeng.com",
      "id": "tag:www.ruanyifeng.com,2019:/blog//1.2106",
      "published_parsed": [
        2019,
        8,
        6,
        9,
        39,
        44,
        1,
        218,
        0
      ],
      "tags": [
        {
          "term": "JavaScript",
          "label": null,
          "scheme": "http://www.sixapart.com/ns/types#category"
        }
      ],
      "links": [
        {
          "rel": "alternate",
          "type": "text/html",
          "href": "http://www.ruanyifeng.com/blog/2019/08/web_components.html"
        }
      ]
    }
  ],
  "status": 200,
  "feed": {
    "generator_detail": {
      "name": "Movable Type 5.2.2",
      "href": "http://www.sixapart.com/movabletype/"
    },
    "updated": "2019-08-15T11:18:32Z",
    "subtitle": "Ruan YiFeng's Blog",
    "id": "tag:www.ruanyifeng.com,2010-04-11:/blog//1",
    "guidislink": false,
    "link": "http://www.ruanyifeng.com/blog/",
    "updated_parsed": [
      2019,
      8,
      15,
      11,
      18,
      32,
      3,
      227,
      0
    ],
    "title_detail": {
      "base": "http://www.ruanyifeng.com/blog/atom.xml",
      "type": "text/plain",
      "language": null,
      "value": "阮一峰的网络日志"
    },
    "title": "阮一峰的网络日志",
    "generator": "Movable Type 5.2.2",
    "subtitle_detail": {
      "base": "http://www.ruanyifeng.com/blog/atom.xml",
      "type": "text/plain",
      "language": null,
      "value": "Ruan YiFeng's Blog"
    },
    "links": [
      {
        "rel": "alternate",
        "type": "text/html",
        "href": "http://www.ruanyifeng.com/blog/"
      },
      {
        "rel": "self",
        "type": "application/atom+xml",
        "href": "http://www.ruanyifeng.com/blog/atom.xml"
      }
    ]
  },
  "updated_parsed": [
    2019,
    8,
    15,
    11,
    18,
    33,
    3,
    227,
    0
  ],
  "namespaces": {
    "": "http://www.w3.org/2005/Atom"
  },
  "version": "atom10"
}